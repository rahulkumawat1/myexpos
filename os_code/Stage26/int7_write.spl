//---------------------------------------WRITE---------------------------------------

// arguments are file desc and word to be written
// return -1 if file desc is invalid
// return -2 if disk/file full
// return -3 if permission denied
// SYSCALL = 5

alias process_table R1;
process_table = PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1];

[process_table + 9] = INT_WRITE;         //MODE_FLAG

alias userSP R2;
userSP = SP;

[process_table + 13] = SP;                //UPTR
SP = [process_table + 11]*512 - 1;       

// checking for file descripter
alias fileDisc R3;
fileDisc = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];

alias retVal R4;
retVal = ([PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512);

if(fileDisc == -2) then
        alias word R5;
        word = [[PTBR + 2*((userSP-3)/512)]*512 + (userSP-3)%512];

        multipush(R1,R2,R3,R4,R5);
        R1 = TERMINAL_WRITE;
        R2 = [SYSTEM_STATUS_TABLE+1];
        R3 = word;
        call DEVICE_MANAGER;
        multipop(R1,R2,R3,R4,R5);

        [retVal] = 0;
        [process_table + 9] = 0;
        SP = userSP;
        ireturn;

else
        alias resource_table R5;
        resource_table = [process_table + 11]*512 + RESOURCE_TABLE_OFFSET;

        //cheking for valid file descripter
        if(fileDisc < 0 || fileDisc > 7 || [resource_table + 2*fileDisc] != FILE) then
                [retVal] = -1;
                [process_table + 9] = 0;
                SP = userSP;
                ireturn;
        endif;        

        alias open_file_idx R6;
        open_file_idx = [resource_table + 2*fileDisc + 1];

        alias inode_idx R7;
        inode_idx = [OPEN_FILE_TABLE + 4*open_file_idx];

        //check for permission
        if([INODE_TABLE + 16*inode_idx + 4] == EXCLUSIVE) then          //PERMISSION
                if([process_table + 3] != ROOT && [process_table + 3] != [INODE_TABLE + 16*inode_idx + 3]) then
                        [retVal] = -3;
                        [process_table + 9] = 0;
                        SP = userSP;
                        ireturn;
                endif;
        endif;

        multipush(R1,R2,R3,R4,R5,R6,R7);
        R1 = ACQUIRE_INODE;
        R2 = [SYSTEM_STATUS_TABLE+1];
        R3 = inode_idx;
        call RESOURCE_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6,R7);

        if(R0 == -1) then       //file has been deleted
                multipush(R1,R2,R3,R4,R5,R6,R7);
                R1 = RELEASE_INODE;
                R2 = [SYSTEM_STATUS_TABLE+1];
                R3 = inode_idx;
                call RESOURCE_MANAGER;
                multipop(R1,R2,R3,R4,R5,R6,R7);

                [retVal] = -1;
                [process_table + 9] = 0;
                SP = userSP;
                ireturn;
        endif;

        alias lseek R8;
        lseek = [OPEN_FILE_TABLE + 4*open_file_idx + 2];

        if(lseek == MAX_FILE_SIZE) then                //MAX_FILE_SIZE = 2048
                multipush(R1,R2,R3,R4,R5,R6,R7,R8);
                R1 = RELEASE_INODE;
                R2 = [SYSTEM_STATUS_TABLE+1];
                R3 = inode_idx;
                call DEVICE_MANAGER;
                multipop(R1,R2,R3,R4,R5,R6,R7,R8);

                [retVal] = -2;
                [process_table + 9] = 0;
                SP = userSP;
                ireturn;
        endif;

        if(lseek%512 == 0 && lseek == [INODE_TABLE + 16*inode_idx + 2]) then    //new block to be allocated
                alias block_num R9;

                multipush(R1,R2,R3,R4,R5,R6,R7,R8);
                R1 = GET_FREE_BLOCK;
                call MEMORY_MANAGER;
                multipop(R1,R2,R3,R4,R5,R6,R7,R8);

                block_num = R0;

                if(block_num == -1) then
                        backup;
                        R1 = RELEASE_INODE;
                        R2 = [SYSTEM_STATUS_TABLE+1];
                        R3 = inode_idx;
                        call DEVICE_MANAGER;
                        restore;

                        [retVal] = -2;
                        [process_table + 9] = 0;
                        SP = userSP;
                        ireturn;
                endif;

                [INODE_TABLE + 16*inode_idx + 8 + (lseek/512)] = block_num;
        endif;

        alias word R10;
        word = [[PTBR + 2*((userSP-3)/512)]*512 + (userSP-3)%512];

        backup;
        R1 = BUFFERED_WRITE;
        R2 = [INODE_TABLE + 16*inode_idx + 8 + (lseek/512)];
        R3 = (lseek%512);
        R4 = word;
        call FILE_MANAGER;
        restore;

        if(lseek == [INODE_TABLE + 16*inode_idx + 2]) then      //FILE_SIZE
                [INODE_TABLE + 16*inode_idx + 2] = lseek+1;
                [ROOT_FILE + 8*inode_idx + 1] = lseek+1;
        endif;

        [OPEN_FILE_TABLE + 4*open_file_idx + 2] = lseek+1;

        backup;
        R1 = RELEASE_INODE;
        R2 = [SYSTEM_STATUS_TABLE+1];
        R3 = inode_idx;
        call RESOURCE_MANAGER;
        restore;

        [retVal] = 0;
        [process_table + 9] = 0;
        SP = userSP;
        ireturn;
endif;
