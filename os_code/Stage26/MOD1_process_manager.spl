alias funcNo R1;
alias currPid R2;

//-----------------------------------GET_PCB_ENTRY-----------------------------------

if(funcNo == GET_PCB_ENTRY) then

    alias i R3;
    i = 0;
    while(i < 16) do
        if([PROCESS_TABLE + 16*i + 4] == TERMINATED) then
            [PROCESS_TABLE + 16*i + 1] = i;                             //PID
            [PROCESS_TABLE + 16*i + 4] = ALLOCATED;                     //STATE
            [PROCESS_TABLE + 16*i + 14] = PAGE_TABLE_BASE + 20*i;       //PTBR
            [PROCESS_TABLE + 16*i + 15] = 10;                           //PTLR
            break;
        endif;
        i = i + 1;
    endwhile;

    if(i == 16) then
        R0 = -1;
    else 
        R0 = i;
    endif;

    return;

endif;

//----------------------------------FREE_PAGE_TABLE----------------------------------

if(funcNo == FREE_PAGE_TABLE) then

    alias i R3;

    //.....page table entries invalide........//

    [PTBR + 0] = -1;
	[PTBR + 1] = "0000";

	[PTBR + 2] = -1;
	[PTBR + 3] = "0000";

    i = 2;    
    while(i<10) do
        if([PTBR+2*i]!=-1)then

            multipush(R1,R2,R3);
            R1 = RELEASE_PAGE;
            R2 = [PTBR + 2*i];         //page_number
            call MEMORY_MANAGER;
            multipop(R1,R2,R3);

            [PTBR+2*i] = -1;
            [PTBR+2*i+1] = "0000";

        endif;
        i = i+1;
    endwhile;

    //......disk_map_table entries invalidate........//
    i = 2;
    while(i<10) do
        
        if(i==2 || i==3 || i==8 || i==9) then   //heap and stack pages
            if([DISK_MAP_TABLE + 10*R2 + i]!=-1) then

                multipush(R1,R2,R3);
                R1 = RELEASE_BLOCK;
                R2 = [DISK_MAP_TABLE + 10*R2 + i];
                call MEMORY_MANAGER;
                multipop(R1,R2,R3);

            endif;

        endif;

        [DISK_MAP_TABLE + 10*R2 + i] = -1;      //invalidate disk_map_table entries

        i = i+1;
    endwhile;

    return;
endif;

//--------------------------------FREE_USER_AREA_PAGE--------------------------------

if(funcNo == FREE_USER_AREA_PAGE) then

    alias resource_table R5;
    resource_table = [PROCESS_TABLE + 16*currPid + 11]*512 + RESOURCE_TABLE_OFFSET;
    
    alias i R6;
    i = 0;

    while(i < 8) do

        if([resource_table + 2*i] == SEMAPHORE) then

            multipush(R1,R2,R3,R5,R6);
            R1 = RELEASE_SEMAPHORE;
			R2 = currPid;
			R3 = [resource_table + 2*i + 1];
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3,R5,R6);

        endif;

        if([resource_table + 2*i] == FILE) then

            multipush(R1,R2,R3,R5,R6);
            R1 = CLOSE;
            R2 = [resource_table + 2*i + 1];
            call FILE_MANAGER;
            multipop(R1,R2,R3,R5,R6);

        endif;

        i = i + 1;
    endwhile;

    multipush(R1,R2,R3);
    R1 = RELEASE_PAGE;
    R2 = [PROCESS_TABLE + 16*currPid + 11];         //page_number
    call MEMORY_MANAGER;
    multipop(R1,R2,R3);
    
    return;
endif;

//-----------------------------------EXIT_PROCESS-----------------------------------

if(funcNo == EXIT_PROCESS) then

    if([PROCESS_TABLE + 16*currPid + 9] != INT_EXEC) then
        alias i R3;
        i = 0;
        while(i < 16) do

            //Wake up processes which are waiting for end of current processes
            if([PROCESS_TABLE + 16*i + 4] == WAIT_PROCESS && [PROCESS_TABLE + 16*i + 5] == currPid) then
                [PROCESS_TABLE + 16*i + 4] = READY;
            endif;

            //set child process to orphan
            if([PROCESS_TABLE + 16*i + 2] == currPid) then
                [PROCESS_TABLE + 16*i + 2] = -1;        //PPID
            endif;

            i = i + 1;
        endwhile;
    endif;

    multipush(R1,R2);
    R1 = FREE_PAGE_TABLE;
    R2 = currPid;
    call PROCESS_MANAGER;
    multipop(R1,R2);

    multipush(R1,R2);
    R1 = FREE_USER_AREA_PAGE;
    R2 = currPid;
    call PROCESS_MANAGER;
    multipop(R1,R2);

    [PROCESS_TABLE+16*currPid+4] = TERMINATED;

    return;
endif;

//-------------------------------------KILL_ALL-------------------------------------

if(funcNo == KILL_ALL) then
    alias i R3;
    
    i = 0;
    while(i < MAX_FILE_NUM) do
        if([INODE_TABLE + 16*i + 1] != -1) then
            multipush(R1,R2,R3);
            R1 = ACQUIRE_INODE;
            R2 = currPid;
            R3 = i;
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3);
        endif;
        i = i + 1;
    endwhile;

    i = 2;
    while(i < 16) do
        if(i != currPid && [PROCESS_TABLE + 16*i + 4] != TERMINATED) then
            multipush(R1,R2,R3);
            R1 = EXIT_PROCESS;
            R2 = i;
            call PROCESS_MANAGER;
            multipop(R1,R2,R3);
        endif;
        i = i + 1;
    endwhile;

    i = 0;
    while(i < MAX_FILE_NUM) do
        if([INODE_TABLE + 16*i + 1] != -1) then
            multipush(R1,R2,R3);
            R1 = RELEASE_INODE;
            R2 = currPid;
            R3 = i;
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3);
        endif;
        i = i + 1;
    endwhile;

    return;
endif;

 
