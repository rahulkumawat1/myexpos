loadi(65,7); //init
loadi(66,8);

loadi(2,15); //excep handler
loadi(3,16);

loadi(63,13); //library
loadi(64,14);

loadi(14,27);   //INT_6 read int
loadi(15,28);

loadi(16,29);   //INT_7 write int
loadi(17,30);

loadi(18,31);   //INT_8 fork int
loadi(19,32);

loadi(20,33);   //INT_9 exec_int
loadi(21,34);

loadi(22, 35);  //INT_10 exit_int
loadi(23, 36);

loadi(24,37);	//INT_11 
loadi(25,38);

loadi(28, 41);	//INT_13
loadi(29, 42);

loadi(30, 43);	//INT_14
loadi(31, 44);

loadi(32,45);	//INT_15 shutdown
loadi(33,46);

loadi(4,17);    //timer int
loadi(5,18);

loadi(8,21);    //console int
loadi(9,22);

loadi(6,19);    //disk_control_int
loadi(7,20);

loadi(40,53);   //MOD0 resource_manager_mod
loadi(41,54);

loadi(42,55);   //MOD1 process_man_mod
loadi(43,56);

loadi(44,57);   //MOD2 memory_man_mod
loadi(45,58);

loadi(48,61);   //MOD4 device_manager_mod
loadi(49,62);

loadi(50,63);   //MOD5 Shedular_module
loadi(51,64);

loadi(59,3);    //inode_user_table
loadi(60,4);

loadi(61,2);    //disk_free_list

//.....Page Table Entry for INIT process pid=1.....//

PTBR = PAGE_TABLE_BASE+20;
PTLR=10;

//.....library.......//
[PTBR+0]= 63;
[PTBR+1]= "0100";
[PTBR+2]= 64;
[PTBR+3]= "0100";


//.....Heap........//
[PTBR+4]= 78;
[PTBR+5]= "0110";
[PTBR+6]= 79;
[PTBR+7]= "0110";


//.....code.......//
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";


//.......stack.......//
[PTBR+16]=76;
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";

[76*512]=[65*512+1];

//....process table
[PROCESS_TABLE+16] = 0; 	   //Tick
[PROCESS_TABLE+16+1] = 1;          //pid
[PROCESS_TABLE+16+4] = CREATED;    //State
[PROCESS_TABLE+16+11] = 80;        //User Area Page
[PROCESS_TABLE+16+13] = 8*512;     //UPTR
[PROCESS_TABLE+16+12] = 0;         //KPTR
[PROCESS_TABLE+16+14] = PAGE_TABLE_BASE+20;   //PTBR
[PROCESS_TABLE+16+15] = 10;        //PTLR

//.......per_process_resource_table entry for init.......//
alias resource_table R0;
resource_table = 80*512 + RESOURCE_TABLE_OFFSET;
[resource_table + 2*0] = -1; 
[resource_table + 2*1] = -1; 
[resource_table + 2*2] = -1; 
[resource_table + 2*3] = -1; 
[resource_table + 2*4] = -1; 
[resource_table + 2*5] = -1; 
[resource_table + 2*6] = -1; 
[resource_table + 2*7] = -1; 

//.....disk_map_table for init......
[DISK_MAP_TABLE + 10 + 0] = -1;
[DISK_MAP_TABLE + 10 + 1] = -1;
[DISK_MAP_TABLE + 10 + 2] = -1;
[DISK_MAP_TABLE + 10 + 3] = -1;
[DISK_MAP_TABLE + 10 + 4] = 7;
[DISK_MAP_TABLE + 10 + 5] = 8;
[DISK_MAP_TABLE + 10 + 6] = -1;
[DISK_MAP_TABLE + 10 + 7] = -1;
[DISK_MAP_TABLE + 10 + 8] = -1;
[DISK_MAP_TABLE + 10 + 9] = -1;

//.........SEMAPHORE_TABLE intialise........//
alias k R3;
k = 0;

while(k < MAX_SEM_COUNT) do

    [SEMAPHORE_TABLE + 4*k] = -1;           //LOCKING_PID
    [SEMAPHORE_TABLE + 4*k + 1] = 0;        //PROCESS_COUNT
    k = k + 1;
endwhile;

//.....memory free list.....

alias j R1;
j = 0;
while(j<=82) do
    [MEMORY_FREE_LIST+j]=1;
    j = j+1;
endwhile;

while(j<=127) do
    [MEMORY_FREE_LIST+j]=0;
    j = j+1;
endwhile;

[SYSTEM_STATUS_TABLE + 3] = 0;    //WAIT_MEM_COUNT
[SYSTEM_STATUS_TABLE + 2] = 45;   //MEM_FREE_COUNT

// state of remaning process set to TERMINATED

alias i R2;
i = 2;
while(i<MAX_PROC_NUM) do
[PROCESS_TABLE+16*i+4] = TERMINATED;
i = i+1;
endwhile;

[TERMINAL_STATUS_TABLE] = 0;  	     //Status

[DISK_STATUS_TABLE] = 0;        //Status

return;
