loadi(65,7);    //init
//loadi(66,8);  //no need

loadi(67,9);	//shell
loadi(68,10);

loadi(2,15);    //excep handler
loadi(3,16);

loadi(63,13);   //library
loadi(64,14);

loadi(10, 23);	//INT_4
loadi(11, 24);

loadi(12,25);	//INT_5
loadi(13,26);

loadi(14,27);   //INT_6 read int
loadi(15,28);

loadi(16,29);   //INT_7 write int
loadi(17,30);

loadi(18,31);   //INT_8 fork int
loadi(19,32);

loadi(20,33);   //INT_9 exec_int
loadi(21,34);

loadi(22, 35);  //INT_10 exit_int
loadi(23, 36);

loadi(24,37);	//INT_11 
loadi(25,38);

loadi(26,39);	//INT12
loadi(27,40);

loadi(28, 41);	//INT_13
loadi(29, 42);

loadi(30, 43);	//INT_14
loadi(31, 44);

loadi(32,45);	//INT_15 shutdown
loadi(33,46);

loadi(34,47);	//INT16
loadi(35,48);

loadi(36,49);	//INT17
loadi(37,50);

loadi(4,17);    //timer int
loadi(5,18);

loadi(8,21);    //console int
loadi(9,22);

loadi(6,19);    //disk_control_int
loadi(7,20);

loadi(40,53);   //MOD0 resource_manager_mod
loadi(41,54);

loadi(42,55);   //MOD1 process_man_mod
loadi(43,56);

loadi(44,57);   //MOD2 memory_man_mod
loadi(45,58);

loadi(46,59);	//MOD3 file_manager_mod
loadi(47,60);

loadi(48,61);   //MOD4 device_manager_mod
loadi(49,62);

loadi(50,63);   //MOD5 Shedular_module
loadi(51,64);

loadi(52,65);	//MOD6 pager_module
loadi(53,66);

//---------------------state of processes set to TERMINATED---------------------

alias i R1;
alias process_table R4;

i = 0;

while(i < MAX_PROC_NUM) do
    process_table = PROCESS_TABLE + 16*i;
    [process_table] = 0;                //TICK FIELD
    [process_table + 4] = TERMINATED;
    [process_table + 6] = 0;            //SWAPPED_OUT
    i = i + 1;
endwhile;


//----------------------PAGE_TABLE Entry for INIT process PID=1----------------------//

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//.....library.......//
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";


//.....Heap........//
[PTBR+4] = -1;
[PTBR+5] = "0110";
[PTBR+6] = -1;
[PTBR+7] = "0110";


//.....code.......//
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";


//.......stack.......//
[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

[66*512] = [65*512+1];

//---------------------------------PROCESS_TABLE Entry---------------------------------

process_table = PROCESS_TABLE + 16;

[process_table + 0] = 0; 	                        //TICK
[process_table + 1] = 1;                           //PID
[process_table + 3] = KERNEL;    //login process is considered as kernel process
[process_table + 4] = CREATED;                     //STATE
[process_table + 11] = 77;                         //USER_AREA_PAGE
[process_table + 13] = 8*512;                      //UPTR
[process_table + 12] = 0;                          //KPTR
[process_table + 14] = PAGE_TABLE_BASE+20;         //PTBR
[process_table + 15] = 10;                         //PTLR

//----------------------PAGE_TABLE Entry for SHELL process PID=2----------------------//

PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

//LIBRARY
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//HEAP
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//CODE
[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//STACK
[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";

[78*512] = [67*512+1];

//---------------------------------PROCESS_TABLE Entry---------------------------------

process_table = PROCESS_TABLE + 16*2;

[process_table + 0] = 0; 	                       //TICK
[process_table + 1] = 2;                           //PID
[process_table + 2] = 1;                           //PPID
[process_table + 3] = ROOT;                 //shell process is owned by root
[process_table + 4] = TERMINATED;                  //STATE
[process_table + 11] = 80;                         //USER_AREA_PAGE
[process_table + 13] = 8*512;                      //UPTR
[process_table + 12] = 0;                          //KPTR
[process_table + 14] = PAGE_TABLE_BASE + 40;       //PTBR
[process_table + 15] = 10;  

//---------------------PER_PROCESS_RESOURCE_TABLE entry for SHELL AND INIT---------------------//


alias resource_table_init R2;
resource_table_init = 77*512 + RESOURCE_TABLE_OFFSET;

alias resource_table_shell R3;
resource_table_shell = 80*512 + RESOURCE_TABLE_OFFSET;

i = 0;
while(i < 8) do
    [resource_table_init + 2*i] = -1;
    [resource_table_shell + 2*i] = -1;
    i = i + 1;
endwhile; 

//-------------------------------DISK_MAP_TABLE for init-------------------------------

alias disk_map_table R3;
disk_map_table = DISK_MAP_TABLE + 10*2;

i = 0;
while(i < 10) do
    [disk_map_table + i] = -1;
    if(i == 4) then
        [disk_map_table + i] = 9;
    endif; 
    if(i == 5) then
        [disk_map_table + i] = 10;
    endif;
    i = i + 1;
endwhile;

//-----------------------------SEMAPHORE_TABLE intialise-----------------------------//

i = 0;

alias sem_table R3;

while(i < MAX_SEM_COUNT) do

    sem_table = SEMAPHORE_TABLE + 4*i;
    [sem_table] = -1;           //LOCKING_PID
    [sem_table + 1] = 0;        //PROCESS_COUNT
    i = i + 1;
endwhile;

//-----------------------------OPEN_FILE_TABLE intialise-----------------------------//

i = 0;

alias open_file_table R3;

while(i < MAX_OPENFILE_NUM) do
    open_file_table = OPEN_FILE_TABLE + 4*i;
    [open_file_table] = -1;           //INODE_INDEX
    [open_file_table + 1] = 0;        //OPEN_INSTANCE_COUNT
    i = i + 1;
endwhile;

//---------------------------------MEMORY_FREE_LIST----------------------------------

i = 0;
while(i < 128) do
    if(i < 83) then
        [MEMORY_FREE_LIST + i] = 1;
    else
        [MEMORY_FREE_LIST + i] = 0;
    endif;
    i = i + 1;
endwhile;

//------------------------------Entry in FILE_STATUS_TABLE------------------------------

i = 0;

while(i < MAX_FILE_NUM) do
    [FILE_STATUS_TABLE + 4*i + 0] = -1;             //LOCKING_PID
    [FILE_STATUS_TABLE + 4*i + 1] = -1;             //FILE_OPEN_COUNT
    i = i + 1;
endwhile;

//------------------------------Entry in BUFFER_TABLE------------------------------

i = 0;
alias buffer_table R5;

while(i < MAX_BUFFER) do
    buffer_table = BUFFER_TABLE + 4*i;
    [buffer_table + 0] = -1;          //BLOCK_NUM
    [buffer_table + 1] = 0;           //DIRTY
    [buffer_table + 2] = -1;          //LOCKING_PID
    i = i + 1;
endwhile;

[TERMINAL_STATUS_TABLE] = 0;  	     //Status

[DISK_STATUS_TABLE] = 0;        //Status

[SYSTEM_STATUS_TABLE + 2] = 45;   //MEM_FREE_COUNT
[SYSTEM_STATUS_TABLE + 3] = 0;    //WAIT_MEM_COUNT
[SYSTEM_STATUS_TABLE + 4] = 0;	 //SWAPPED_COUNT
[SYSTEM_STATUS_TABLE + 5] = 0;	  //PAGING_STATUS

return;
