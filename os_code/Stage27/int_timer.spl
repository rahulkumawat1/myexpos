[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13] = SP;		//UPTR
SP = [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512 - 1;	//SP point to kernal stack
backup;

alias currPid R1;
currPid = [SYSTEM_STATUS_TABLE+1];

alias i R2;
i = 0;

if([SYSTEM_STATUS_TABLE + 5] != 0) then      //PAGING_STATUS if swapping is initiated
    
    if(currPid == SWAPPER_DAEMON && [SYSTEM_STATUS_TABLE + 5] == SWAP_OUT) then  //PAGING_STATUS
        multipush(R1,R2);
        R2 = currPid;
        R1 = SWAP_OUT;
        call PAGER_MODULE;
        multipop(R1,R2);
    else
        if(currPid == SWAPPER_DAEMON && [SYSTEM_STATUS_TABLE + 5] == SWAP_IN) then  //PAGING_STATUS
            multipush(R1,R2);
            R2 = currPid;
            R1 = SWAP_IN;
            call PAGER_MODULE;
            multipop(R1,R2);
        endif;
    endif;


else    //swapping is not on now check if it should be initiated

    if([SYSTEM_STATUS_TABLE + 2] < MEM_LOW) then        //MEM_FREE_COUNT
		[SYSTEM_STATUS_TABLE + 5] = SWAP_OUT;	        //swap out is needed
	else

		if([SYSTEM_STATUS_TABLE + 4] != 0) then	        //there are swapped out processes
			i = 3;
			
            while(i < 15) do
				alias process_table R3;
				process_table = PROCESS_TABLE + 16*i;
				
                if([process_table + 6] == 1 && [process_table + 0] > MAX_TICK) then	//process is swapped out and has been in swapped out state for a long time
					[SYSTEM_STATUS_TABLE + 5] = SWAP_IN;
					break;
				endif;

				i = i + 1;
			endwhile;

			if(i == 15 && [SYSTEM_STATUS_TABLE + 2] > MEM_HIGH) then	//lot of free memory pages
				[SYSTEM_STATUS_TABLE + 5] = SWAP_IN;
			endif;
		endif;

	endif;

endif;

[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+4] = READY;

//Tick Field

i = 0;

while(i < 16) do
    if([PROCESS_TABLE + 16*i + 4] != TERMINATED) then
        [PROCESS_TABLE + 16*i] = [PROCESS_TABLE + 16*i] + 1;
    endif;  
    i = i + 1; 
endwhile;

call SCHEDULER;

restore;
SP = [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13];	//User_SP
[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9] = 0;  	//MODE_FLAG
ireturn;
