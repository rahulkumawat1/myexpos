//-------------------------------------PAGER_MODULE-------------------------------------

alias funcNum R1;
alias currPid R2;

//---------------------------------------SWAP_OUT---------------------------------------
// Invoked when the physical memory is critically low
// The function chooses a process to swap out, and free it's memory by moving it to the disk

if(funcNum == SWAP_OUT) then
    
    //choose a process to SWAP_OUT
    alias i R3;
    i = 3;

    alias swap_out_pid R4;
    swap_out_pid = -1;

    //check in WAIT_PROCESS state.
    while(i < 16) do
        if([PROCESS_TABLE + 16*i + 6] == 0 && [PROCESS_TABLE + 16*i + 4] == WAIT_PROCESS) then
            swap_out_pid = i;
 			break;
 		endif;
        i = i + 1;
    endwhile;

    if(swap_out_pid == -1) then
        i = 3;
        //check in WAIT_PROCESS state.
        while(i < 16) do
            if([PROCESS_TABLE + 16*i + 6] == 0 && [PROCESS_TABLE + 16*i + 4] == WAIT_SEMAPHORE) then
                swap_out_pid = i;
                break;
            endif;
            i = i + 1;
        endwhile;
    endif;

    alias max_tick R6;
 	max_tick = 0;

    if(swap_out_pid == -1) then
        alias process_table R5;

        alias state R7;

 		i = 3;
 		while(i < 16) do
 			process_table = PROCESS_TABLE + 16*i;	
 		  	state = [process_table + 4]; 

 			if(([process_table + 6] == 1) || (state == TERMINATED) || (state == RUNNING) || (state == ALLOCATED)) then
 				i = i + 1;
 				continue;
 			endif;
 			
 			if([process_table + 0] > max_tick) then
 				max_tick = [process_table + 0];
 				swap_out_pid = i;
 			endif;
 		
 			i = i + 1;
 		endwhile;
    endif;

    //if still no process to be swapped out is found
    if(swap_out_pid == -1) then
        [SYSTEM_STATUS_TABLE + 5] = 0;	    //set the paging status to 0
 		return;
    endif;

    //process to be swapped out is swap_out_pid
    alias swap_process_table R8;
 	alias swap_page_table R9;

 	swap_process_table = PROCESS_TABLE + 16*swap_out_pid;
 	swap_page_table = PAGE_TABLE_BASE + 20*swap_out_pid;

 	[swap_process_table] = 0;	//set the tick field to 0

    //iterate through the page table entries to check if heap and stack can be deallocated

    i = 2;

    alias page R10;

    while(i < 10) do
        page = [swap_page_table + 2*i];

        if(page == -1) then
            i = i + 1;
            continue;
        endif;

        if(i >= 4 && i <= 7) then       //code pages
            backup;
            R1 = RELEASE_PAGE;
            R2 = page;
            call MEMORY_MANAGER;
            restore;

            [swap_page_table + 2*i] = -1;
            [swap_page_table + 2*i + 1] = "0000";
        endif;  

        if((i <= 3 || i >= 8) && [MEMORY_FREE_LIST + page] == 1) then   //check for stack and non shared heap pages
            alias block R11;

            multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
            R1 = GET_SWAP_BLOCK;
            call MEMORY_MANAGER;
            multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

            block = R0;

            [DISK_MAP_TABLE + 10*swap_out_pid + i] = block;

            backup;
            R1 = DISK_STORE;
            R2 = currPid;
            R3 = page;
            R4 = block;
            call DEVICE_MANAGER;
            restore;

            backup;
            R1 = RELEASE_PAGE;
            R2 = page;
            call MEMORY_MANAGER;
            restore;

            [swap_page_table + 2*i] = -1;
            [swap_page_table + 2*i + 1] = "0000";
            
        endif;
        i = i + 1;
    endwhile;

    [SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4] + 1;	//increment swapped out count
 	[SYSTEM_STATUS_TABLE + 5] = 0;	                            //reset the PAGING_STATUS
 	[swap_process_table + 6] = 1;                               //SWAP_FLAG

 	return;	

endif;

//----------------------------------------SWAP_IN----------------------------------------

if(funcNum == SWAP_IN) then
    alias i R3;
    i = 0;

    alias swap_in_pid R4;
    swap_in_pid = -1;

	//loop through the process table entries to find the process with max tick
    alias max_tick R5;
    max_tick = 0;

    i = 3;

    while(i < 15) do
		alias process_table R6;
		process_table = PROCESS_TABLE + 16*i;
		if([process_table + 6] == 1 && ([process_table] > max_tick)) then
			max_tick = [process_table];
			swap_in_pid = i;
		endif;
		i = i + 1;
	endwhile;

    if(swap_in_pid == -1) then
		[SYSTEM_STATUS_TABLE + 5] = 0;
		R0 = -1;
		return;
	endif;

    alias swap_process_table R7;
	alias swap_page_table R8;
	alias disk_map_table R9;

	swap_process_table = PROCESS_TABLE + swap_in_pid*16;
	swap_page_table = PAGE_TABLE_BASE + 20*swap_in_pid;
	disk_map_table = DISK_MAP_TABLE + 10*swap_in_pid;

    [swap_process_table] = 0;           //tick_field

    i = 2;
    while(i < 10) do
        if(i >= 4 && i <= 7) then
            i = i + 1;
            continue;
        endif;

        alias block R10;
        block = [disk_map_table + i];

        if(block == -1) then
            i = i + 1;
            continue;
        endif;

        alias page R11;

        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
        R1 = GET_FREE_PAGE;
        call MEMORY_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

        page = R0;

        backup;
        R1 = DISK_LOAD;         //load the stack and heap blocks back into the memory
        R2 = currPid;
        R3 = page;
        R4 = block;
        call DEVICE_MANAGER;
        restore;

        backup;
        R1 = RELEASE_BLOCK;
        R2 = block;
        call MEMORY_MANAGER;
        restore;

        [swap_page_table + 2*i] = page;
		[swap_page_table + 2*i + 1] = "0110";

        [disk_map_table + i] = -1;

        i = i + 1;
    endwhile;

    [SYSTEM_STATUS_TABLE + 5] = 0;                              //PAGING_STATUS
	[SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4] - 1;	//decrement number of swapped out processes
	[swap_process_table + 6] = 0;                               //SWAP FLAG
	return;

endif;