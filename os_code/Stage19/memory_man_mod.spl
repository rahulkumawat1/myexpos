alias funcNo R1;

if(funcNo == RELEASE_BLOCK) then
    //R2 has block
    [DISK_FREE_LIST + R2] = [DISK_FREE_LIST + R2] - 1;
    return;
endif;

if(R1 == GET_CODE_PAGE) then
	
        //backup;
	alias block_num R2;	//R2 contains block num
	alias i R3;
	alias block R4;
	alias page_num R0;

	// IF WE GET A PAGE WHICH IS ALREADY PRESENT IN MEMORY	
	i = 0;
	while(i < 16) do
		block = 4;
		while(block < 8) do
			if([DISK_MAP_TABLE + 10*i + block] == block_num && [PAGE_TABLE_BASE + 20*i + 2*(block)] != -1) then
				page_num = [PAGE_TABLE_BASE + 20*i + 2*block];
				[MEMORY_FREE_LIST + page_num] = [MEMORY_FREE_LIST + page_num] + 1;
				breakpoint;
                return;
			endif;
			block = block + 1;
		endwhile;		
	i = i+1;	
	endwhile;

	// IF NO FREE PAGE IS PRESENT AT MOMENT
	R1 = GET_FREE_PAGE;
	call MOD_2;                 //MEMORY_MANAGER

	R1 = DISK_LOAD;
	R4 = block_num;
	R2 = [SYSTEM_STATUS_TABLE+1];
	R3 = R0;	// page_num got from GET_FREE_PAGE
	call MOD_4;                 //DEVICE_MANGER

    breakpoint;
	return;

endif;

if(funcNo == RELEASE_PAGE) then

    alias pageNo R2;
    [MEMORY_FREE_LIST+pageNo] = [MEMORY_FREE_LIST+pageNo]-1;

    if([MEMORY_FREE_LIST+pageNo]==0) then
        [SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]+1;    //MEM_FREE_COUNT
    endif;

    alias i R3;
    i=0;
    while(i<16) do
        if([PROCESS_TABLE+16*i+4]==WAIT_MEM) then
            [PROCESS_TABLE+16*i+4] = READY;
        endif;
        i = i+1;
    endwhile;

    return;
endif;

if(R1 == GET_FREE_PAGE)then
    //return in R0

    [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3]+1;    //WAIT_MEM_COUNT
    while([SYSTEM_STATUS_TABLE+2]==0) do

        [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+4] = WAIT_MEM;

        backup;
        call SCHEDULER;
        restore;
    endwhile;

    [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3]-1;    //WAIT_MEM_COUNT
    [SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]-1;    //MEM_FREE_COUNT

    alias i R3;
    i = 76;

    while(i<MAX_MEM_PAGE) do
        if([MEMORY_FREE_LIST+i]==0) then
            [MEMORY_FREE_LIST+i] = 1;
            R0 = i;

            break;
        endif;
        i = i+1;
    endwhile;

    return;
endif;