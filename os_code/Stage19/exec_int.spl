//---------------------------------EXEC SYS CALL-------------------------------//

alias userSP R0;
userSP = SP;

[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 13] = SP;   //UPTR
SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11]*512 - 1;

[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9] = 9;     //MODE_FLAG

alias filename R1;
filename = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];

alias i R2;
i = 0;

while(i<MAX_FILE_NUM) do
    if([INODE_TABLE + 16*i] == EXEC && [INODE_TABLE + 16*i + 1] == filename) then
        break;
    endif;
    i = i+1;
endwhile;


if(i==MAX_FILE_NUM) then
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;     //MODE_FLAG
    SP = userSP;
    [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;
    ireturn;
endif;


// SET return value to ZERO
[[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512] = 0;

//R2 has new process inode index

alias exitPid R3;
exitPid = [SYSTEM_STATUS_TABLE + 1];

//....calling EXIT_PROCESS.....

multipush(R0,R1,R2,R3);

R1 = EXIT_PROCESS;
R2 = [SYSTEM_STATUS_TABLE + 1];
call PROCESS_MANAGER;

multipop(R0,R1,R2,R3);


alias user_area_page R4;
user_area_page = [PROCESS_TABLE + 16*exitPid + 11];

[MEMORY_FREE_LIST + user_area_page] = [MEMORY_FREE_LIST + user_area_page] + 1;
[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]-1;

SP = user_area_page*512-1;

//.......per_process_resource_table entry.......//
alias resource_table R5;
resource_table = user_area_page*512 + RESOURCE_TABLE_OFFSET;
[resource_table + 2*0] = -1; 
[resource_table + 2*1] = -1; 
[resource_table + 2*2] = -1; 
[resource_table + 2*3] = -1; 
[resource_table + 2*4] = -1; 
[resource_table + 2*5] = -1; 
[resource_table + 2*6] = -1; 
[resource_table + 2*7] = -1; 

//......Disk_map_table entry.....//
[DISK_MAP_TABLE + 10*exitPid + 0] = -1;
[DISK_MAP_TABLE + 10*exitPid + 1] = -1;
[DISK_MAP_TABLE + 10*exitPid + 2] = -1;
[DISK_MAP_TABLE + 10*exitPid + 3] = -1;
[DISK_MAP_TABLE + 10*exitPid + 4] = [INODE_TABLE + 16*i + 8];
[DISK_MAP_TABLE + 10*exitPid + 5] = [INODE_TABLE + 16*i + 9];
[DISK_MAP_TABLE + 10*exitPid + 6] = [INODE_TABLE + 16*i + 10];
[DISK_MAP_TABLE + 10*exitPid + 7] = [INODE_TABLE + 16*i + 11];
[DISK_MAP_TABLE + 10*exitPid + 8] = -1;
[DISK_MAP_TABLE + 10*exitPid + 9] = -1;

//New process uses PID of terminated process

[PROCESS_TABLE + 16*exitPid + 4] = RUNNING;
[PROCESS_TABLE + 16*exitPid + 7] = i;   //inode_index

//-------------------------setting page table--------------------//

//.......library pages.......//
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//.......stack.......//

alias freepage R5;

//...stack_page1

multipush(R0,R1,R2,R3);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
freepage = R0;
multipop(R0,R1,R2,R3);

[PTBR+16] = freepage;		
[PTBR+17] = "0110";

//...stack_page2

multipush(R0,R1,R2,R3);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
freepage = R0;
multipop(R0,R1,R2,R3);

[PTBR+18] = freepage;
[PTBR+19] = "0110";

//.....Heap pages are invalidated........//

[PTBR + 4] = -1;
[PTBR + 5] = "0000";

[PTBR + 6] = -1;
[PTBR + 7] = "0000";

//..............code pages..............//

if([INODE_TABLE+16*i+8]!=-1)then

    multipush(R0,R1,R2,R3);
    R1 = GET_CODE_PAGE;
    R2 = [INODE_TABLE + 16*i +8];
    call MEMORY_MANAGER;
    freepage = R0;
    multipop(R0,R1,R2,R3);

    [PTBR+8] = freepage;		
    [PTBR+9]="0100";

endif;

[PTBR + 10] = -1;
[PTBR + 11] = "0000";

[PTBR + 12] = -1;
[PTBR + 13] = "0000";

[PTBR + 14] = -1;
[PTBR + 15] = "0000";

[[PTBR+16]*512]=[[PTBR+8]*512+1];
SP = 8*512;

[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1]+9] = 0; //MODE_FLAG

ireturn;