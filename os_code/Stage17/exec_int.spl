alias userSP R0;
userSP = SP;

[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1]+13] = SP;   //UPTR
SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1]+11]*512 - 1;

[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1]+9] = 9;     //MODE_FLAG

alias filename R1;
filename = [[PTBR+2*((userSP-4)/512)]*512 + (userSP-4)%512];

alias i R2;
i = 0;

while(i<MAX_FILE_NUM) do
    if([INODE_TABLE+16*i+1]==filename) then
        break;
    endif;
i = i+1;
endwhile;

//SEE
if(i==MAX_FILE_NUM) then
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1]+9] = 0;     //MODE_FLAG
    SP = userSP;
    [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;
    ireturn;
endif;

//R2 has new process inode index

alias exitPid R3;
exitPid = [SYSTEM_STATUS_TABLE+1];

multipush(R0,R1,R2,R3);

R1 = EXIT_PROCESS;
R2 = [SYSTEM_STATUS_TABLE+1];
call PROCESS_MANAGER;

multipop(R0,R1,R2,R3);


alias user_area_page R4;
user_area_page = [PROCESS_TABLE+16*exitPid+11];

[MEMORY_FREE_LIST+user_area_page] = [MEMORY_FREE_LIST+user_area_page] + 1;
[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]-1;    //MEM_FREE_COUNT

SP = user_area_page*512-1;

//New process uses PID of terminated process

[PROCESS_TABLE+16*exitPid+4] = RUNNING;
[PROCESS_TABLE+16*exitPid+7] = i;   //inode_index

//-------------------------setting page table--------------------//

//.......library was not deallocated.......//

alias freepage R5;

//.......stack.......//

//...stack_page1

multipush(R0,R1,R2,R3,R4);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
freepage = R2;
multipop(R0,R1,R2,R3,R4);

[PTBR+16] = freepage;		
[PTBR+17] = "0110";

//...stack_page2

multipush(R0,R1,R2,R3,R4);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
freepage = R2;
multipop(R0,R1,R2,R3,R4);

[PTBR+18] = freepage;
[PTBR+19] = "0110";

//.....Heap........//

//.....heap_page1

multipush(R0,R1,R2,R3,R4);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
freepage = R2;
multipop(R0,R1,R2,R3,R4);

[PTBR+4]= freepage;		
[PTBR+5]= "0110";

//.....heap_page2

multipush(R0,R1,R2,R3,R4);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
freepage = R2;
multipop(R0,R1,R2,R3,R4);

[PTBR+6]= freepage;
[PTBR+7]= "0110";


//..............code..............//

if([INODE_TABLE+16*i+8]!=-1)then

    multipush(R0,R1,R2,R3,R4);
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
    freepage = R2;
    multipop(R0,R1,R2,R3,R4);

    [PTBR+8] = freepage;		
    [PTBR+9]="0100";

endif;

if([INODE_TABLE+16*i+9]!=-1)then

    multipush(R0,R1,R2,R3,R4);
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
    freepage = R2;
    multipop(R0,R1,R2,R3,R4);

    [PTBR+10] = freepage;		
    [PTBR+11]="0100";

endif;

if([INODE_TABLE+16*i+10]!=-1)then

    multipush(R0,R1,R2,R3,R4);
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
    freepage = R2;
    multipop(R0,R1,R2,R3,R4);

    [PTBR+12] = freepage;		
    [PTBR+13]="0100";

endif;

if([INODE_TABLE+16*i+11]!=-1)then

    multipush(R0,R1,R2,R3,R4);
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
    freepage = R2;
    multipop(R0,R1,R2,R3,R4);

    [PTBR+14] = freepage;		
    [PTBR+15]="0100";

endif;

//......loadi of file..........

if([INODE_TABLE+16*i+8]!=-1)then
    loadi([PTBR+8],[INODE_TABLE+16*i+8]);		
endif;

if([INODE_TABLE+16*i+9]!=-1)then
    loadi([PTBR+10],[INODE_TABLE+16*i+9]);		
endif;

if([INODE_TABLE+16*i+10]!=-1)then
    loadi([PTBR+12],[INODE_TABLE+16*i+10]);		
endif;

if([INODE_TABLE+16*i+11]!=-1)then
    loadi([PTBR+14],[INODE_TABLE+16*i+11]);		
endif;

[[PTBR+16]*512]=[[PTBR+8]*512+1];
SP = 8*512;

[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1]+9] = 0; //MODE_FLAG

ireturn;